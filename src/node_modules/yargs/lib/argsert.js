<<<<<<< HEAD
'use strict'
=======
>>>>>>> 40b68b803b32f109350a2917c9a607927080fd74
const command = require('./command')()
const YError = require('./yerror')

const positionName = ['first', 'second', 'third', 'fourth', 'fifth', 'sixth']

<<<<<<< HEAD
module.exports = function argsert (expected, callerArguments, length) {
=======
module.exports = function (expected, callerArguments, length) {
>>>>>>> 40b68b803b32f109350a2917c9a607927080fd74
  // TODO: should this eventually raise an exception.
  try {
    // preface the argument description with "cmd", so
    // that we can run it through yargs' command parser.
<<<<<<< HEAD
    let position = 0
    let parsed = {demanded: [], optional: []}
=======
    var position = 0
    var parsed = {demanded: [], optional: []}
>>>>>>> 40b68b803b32f109350a2917c9a607927080fd74
    if (typeof expected === 'object') {
      length = callerArguments
      callerArguments = expected
    } else {
<<<<<<< HEAD
      parsed = command.parseCommand(`cmd ${expected}`)
=======
      parsed = command.parseCommand('cmd ' + expected)
>>>>>>> 40b68b803b32f109350a2917c9a607927080fd74
    }
    const args = [].slice.call(callerArguments)

    while (args.length && args[args.length - 1] === undefined) args.pop()
    length = length || args.length

    if (length < parsed.demanded.length) {
<<<<<<< HEAD
      throw new YError(`Not enough arguments provided. Expected ${parsed.demanded.length} but received ${args.length}.`)
=======
      throw new YError('Not enough arguments provided. Expected ' + parsed.demanded.length +
        ' but received ' + args.length + '.')
>>>>>>> 40b68b803b32f109350a2917c9a607927080fd74
    }

    const totalCommands = parsed.demanded.length + parsed.optional.length
    if (length > totalCommands) {
<<<<<<< HEAD
      throw new YError(`Too many arguments provided. Expected max ${totalCommands} but received ${length}.`)
    }

    parsed.demanded.forEach((demanded) => {
      const arg = args.shift()
      const observedType = guessType(arg)
      const matchingTypes = demanded.cmd.filter(type => type === observedType || type === '*')
=======
      throw new YError('Too many arguments provided. Expected max ' + totalCommands +
        ' but received ' + length + '.')
    }

    parsed.demanded.forEach(function (demanded) {
      const arg = args.shift()
      const observedType = guessType(arg)
      const matchingTypes = demanded.cmd.filter(function (type) {
        return type === observedType || type === '*'
      })
>>>>>>> 40b68b803b32f109350a2917c9a607927080fd74
      if (matchingTypes.length === 0) argumentTypeError(observedType, demanded.cmd, position, false)
      position += 1
    })

<<<<<<< HEAD
    parsed.optional.forEach((optional) => {
      if (args.length === 0) return
      const arg = args.shift()
      const observedType = guessType(arg)
      const matchingTypes = optional.cmd.filter(type => type === observedType || type === '*')
=======
    parsed.optional.forEach(function (optional) {
      if (args.length === 0) return
      const arg = args.shift()
      const observedType = guessType(arg)
      const matchingTypes = optional.cmd.filter(function (type) {
        return type === observedType || type === '*'
      })
>>>>>>> 40b68b803b32f109350a2917c9a607927080fd74
      if (matchingTypes.length === 0) argumentTypeError(observedType, optional.cmd, position, true)
      position += 1
    })
  } catch (err) {
    console.warn(err.stack)
  }
}

function guessType (arg) {
  if (Array.isArray(arg)) {
    return 'array'
  } else if (arg === null) {
    return 'null'
  }
  return typeof arg
}

function argumentTypeError (observedType, allowedTypes, position, optional) {
<<<<<<< HEAD
  throw new YError(`Invalid ${positionName[position] || 'manyith'} argument. Expected ${allowedTypes.join(' or ')} but received ${observedType}.`)
=======
  throw new YError('Invalid ' + (positionName[position] || 'manyith') + ' argument.' +
    ' Expected ' + allowedTypes.join(' or ') + ' but received ' + observedType + '.')
>>>>>>> 40b68b803b32f109350a2917c9a607927080fd74
}
